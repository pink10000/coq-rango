This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-30T09:28:57.659Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Directory Structure
================================================================
.github/
  workflows/
    ci.yml
src/
  ce_api.ml
  ce_get.c
  ce_syntax.mlg
  dune
theories/
  CoqRango.v
  dune
  Test.v
.gitignore
coq-rango.opam
dune-project
README.md

================================================================
Files
================================================================

================
File: .github/workflows/ci.yml
================
name: CI

on:
  push:
    branches:
    - v8.16
  pull_request:
    branches:
    - v8.16

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        ocaml-compiler: [4.09.x, 4.14.x]
        coq-version: [8.16+rc1]
    env:
      NJOBS: "2"
      OPAMJOBS: "2"
      OPAMROOTISOK: "true"
      OPAMYES: "true"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: Set up OCaml ${{ matrix.ocaml-compiler }}
        uses: avsm/setup-ocaml@v2
        with:
          ocaml-compiler: ${{ matrix.ocaml-compiler }}
          dune-cache: true
      - name: Install Coq
        run: |
          eval $(opam env)
          opam repos add coq-released http://coq.inria.fr/opam/released
          opam repos add coq-core-dev http://coq.inria.fr/opam/core-dev
          opam install coq.${{ matrix.coq-version }}
      - name: Display OPAM Setup
        run: |
          eval $(opam env)
          opam list
      - name: Test Template
        run: |
          eval $(opam env)
          dune build --display=short

================
File: src/ce_api.ml
================
(** Example: calling a C function *)
external get_n : unit -> int = "get_n"

let callC () : int = get_n ()

(** Example: simple, no-op tactic + print *)
module PV = Proofview

let msg_in_tactic str : unit PV.tactic =
  PV.tclLIFT (PV.NonLogical.make (fun () ->
      Feedback.msg_warning (Pp.str str)))

let printHello : unit PV.tactic =
  let open PV.Notations in
  msg_in_tactic "bruh" >>= fun () ->
  PV.tclUNIT ()

================
File: src/ce_get.c
================
int get_n(void *p) {
  return 1092;
}

================
File: src/ce_syntax.mlg
================
DECLARE PLUGIN "coq-rango.plugin"

{

open Ltac_plugin

}

TACTIC EXTEND Hello
| [ "hello" ] -> { Ce_api.printHello }
END

VERNAC COMMAND EXTEND CallToC CLASSIFIED AS QUERY
| [ "CallC" ] -> { let i = Ce_api.callC () in Feedback.msg_warning Pp.(int i) }
END

================
File: src/dune
================
(library
 (name coq_rango)                   ; This is the name you will use in
                                    ; Coq's `Declare ML Module`, and
                                    ; the name of the main OCaml
                                    ; module of your plugin.

 (public_name coq-rango.plugin)     ; This makes the plugin
                                    ; installable; recommended, must
                                    ; match opam package name.
 (modes byte native)

 (synopsis "My Coq plugin")         ; Synopsis, used in META generation.

 (flags :standard -rectypes -w -27) ; Coq requires the `-rectypes`
                                    ; flag; CoqPP generated code
                                    ; requires to disable warning 27
                                    ; often.

 (foreign_stubs                     ; we link our plugin with a C
  (language c)                      ; library! Optional, of course.
  (names ce_get))

 (libraries                         ; OCaml Libraries we want to link
                                    ; with, your choice here.

   coq-core.vernac                  ; Needed for vernac extend.
   coq-core.plugins.ltac            ; Needed for tactic extend.
 )
)

; This will let Dune know about Coq's .mlg grammar files.
(coq.pp (modules ce_syntax))

================
File: theories/CoqRango.v
================
Declare ML Module "coq_rango:coq-rango.plugin".

================
File: theories/dune
================
(coq.theory
 (name Rango)                      ; This will determine the top-level Coq
                                   ; module of your theory, modules will
                                   ; be MyPlugin.A, etc., when seen from the
                                   ; outside.

 (package coq-rango)               ; Adding this line will make your
                                   ; library installable in the opam package

 (libraries coq-rango.plugin))     ; Here you should declare all
                                   ; OCaml plugin dependencies
                                   ; for your Coq files.

; Other important fields are `modules` and `flags`, see Dune
; documentation for more details.

================
File: theories/Test.v
================
Require Import CoqRango.

CallC.

Lemma foo : True.
Proof.
hello. now auto.
Qed.

Print foo.

================
File: .gitignore
================
_build
*.install
.merlin
*.glob
*.aux

================
File: coq-rango.opam
================
opam-version: "2.0"
maintainer: "you@example.com"

name: "coq_rango"

homepage: "https://github.com/your-github/my-plugin"
dev-repo: "git+https://github.com/your-github/my-plugin.git"
bug-reports: "https://github.com/your-github/my-plugin/issues"
doc: "https://your-github.github.io/my-plugin"
license: "MIT"

synopsis: "One line description of your plugin"
description: """
Longer description of what your plugin does that can
cover multiple lines. Including punctuation."""

build: ["dune" "build" "-p" name "-j" jobs]
depends: [
  "ocaml" {>= "4.07.1"}
  "dune" {>= "2.5"}
  "coq" {>= "8.14" & < "8.18"}
]

tags: [
  "category:Miscellaneous/Coq Extensions"
  "keyword:your keyword"
  "logpath:MyPlugin"
]

authors: [
  "Your Name"
  "Another Optional Name"
]

================
File: dune-project
================
(lang dune 2.9)
(using coq 0.3)
(name coq-rango)

================
File: README.md
================
# coq-rango
Coq proof tactic that implements the Rango proof synthesis tool.
